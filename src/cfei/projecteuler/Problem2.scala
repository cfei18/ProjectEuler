package cfei.projecteuler
import scala.collection.mutable.Map

object Problem2 {

  /**
   * Each new term in the Fibonacci sequence is generated by adding the previous
   * two terms. By starting with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   * By considering the terms in the Fibonacci sequence whose values do not 
   * exceed four million, find the sum of the even-valued terms.
   */
  
  val numberCache:Map[Int,Int] = Map[Int,Int]()
  
  def main(args : Array[String]) {
    var index = 0
    var hit4Mil = false
    while (!hit4Mil) {
      val term = fib(index)
      if(term > 4000000) {
        hit4Mil = true
      } else {
    	index += 1
      }
    }
    //fib(n) = 4 * fib(n-3) + fib(n-6)
    val total = 1.until(index, 3).fold(0)((y,x) => y + fib(x))
    println(total)
  }
  
  def fib(index : Int) : Int = {
    if (index == 0) {
      return 1
    } else if (index == 1) {
      return 2
    }
    
    if(numberCache.contains(index)) {
      return numberCache(index)
    }
    
    val minus1 = fib(index - 1)
    numberCache += (index - 1 -> minus1)
    
    val minus2 = fib(index - 2)
    numberCache += (index - 2 -> minus2)
    
    return minus1 + minus2
  }
  
}