package cfei.projecteuler
import cfei.projecteuler.util.Utils
import collection.mutable.Map

object Problem12 {
  
  /**
   * The sequence of triangle numbers is generated by adding the natural 
   * numbers. So the 7th triangle number would be 
   * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
   *     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
   * Let us list the factors of the first seven triangle numbers:
   *  1: 1
   *  3: 1,3
   *  6: 1,2,3,6
   * 10: 1,2,5,10
   * 15: 1,3,5,15
   * 21: 1,3,7,21
   * 28: 1,2,4,7,14,28
   * 
   * We can see that 28 is the first triangle number to have over five divisors.
   * 
   * What is the value of the first triangle number to have over five hundred 
   * divisors?
   */

  def main(args : Array[String]) {
    var result:Long = 0L
    var sum = 1
    var index = 1
    while(result == 0) {
      val numDivisors = getNumDivisors(index * (index+1) / 2)
      if(numDivisors > 500) {
        result = sum
      }
      index += 1
      sum += index
    }
    println(result)
  }
  
  def getNumDivisors(num : Long) : Int = {
    var factorization = Utils.primeFactorization(num.intValue())
    return factorization.values.map(num => num+1).foldLeft(1)((result, num) => result * num)
  }

}